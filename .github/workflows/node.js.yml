# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy releases

on:
  push:
    branches: [ master ]
jobs:
  deploy:
    # Trigger this step only when a commit on master is tagged with a version number
    if: |
      startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Extract the version and commit body from the tag
      id: extract_release
      # The body may be multiline, therefore we need to escape some characters
      run: |
        VERSION="${{ github.ref }}"
        VERSION=${VERSION##*/}
        VERSION=${VERSION##*v}
        echo "::set-output name=VERSION::$VERSION"
        BODY=$(git show -s --format=%b)
        BODY="${BODY//'%'/'%25'}"
        BODY="${BODY//$'\n'/'%0A'}"
        BODY="${BODY//$'\r'/'%0D'}"
        echo "::set-output name=BODY::$BODY"

    - name: Install dependencies
      run: npm install

    - name: Install nodeJS package tool
      run: npm install -g pkg

    - name: create standalone binaries
      run: pkg --targets node12-linux-x64,node12-linux-arm64,node12-win-x64,node12-macos-x64 cli.js
    
    - name: Create Github Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.extract_release.outputs.VERSION }}
        draft: false
        # Prerelease versions create prereleases on Github
        prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
        body: ${{ steps.extract_release.outputs.BODY }}

    - name: Upload Alexa-Cookie binary Windows
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cli-win-x64.exe
        asset_name: alexa-cookie-cli-win-x64.exe
        asset_content_type: application/vnd.microsoft.portable-executable

    - name: Upload Alexa-Cookie binary MacOS
      id: upload-release-asset-macos
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cli-macos-x64
          asset_name: alexa-cookie-cli-macos-x64
          asset_content_type: application/mac-binhex40

    - name: Upload Alexa-Cookie binary Linux
      id: upload-release-asset-Linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cli-linux-x64
        asset_name: alexa-cookie-cli-linux-x64
        asset_content_type: application/x-executable


    - name: Upload Alexa-Cookie binary Linux-arm
      id: upload-release-asset-Linux-arm
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cli-linux-arm64
        asset_name: alexa-cookie-cli-linux-arm64
